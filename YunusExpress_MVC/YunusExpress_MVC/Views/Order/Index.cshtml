@using YunusExpress_MVC.Models
@using YunusExpress_MVC.ViewModels
@model List<Order>

@{
    ViewData["Title"] = "Sifariş Siyahısı";
    Layout = null;
}


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tap Və Dəyiş</title>
    <link rel="stylesheet" href="~/assets/style/reset.css">
    <link rel="stylesheet" href="~/assets/style/findAndChange.css">
    <link href="~/assets/favicon.ico" rel="icon" />
</head>
<body>
    <div class="container">
        <form method="get" id="filterForm">
            <div class="form-heading">
                @Html.AntiForgeryToken()

                <div style="display: flex;">
                    <div>
                        <div class="text-section" style="width: 350px;">
                            <label class="text-label">Göndərən</label>


                            @Html.DropDownList(
                                     "senderName",
                                     ViewBag.Senders as List<SelectListItem>,
                                     "Hamısı",
                                     new
                                     {
                                         id = "senderDropdown",
                                         @class = "text-input",
                                         style = "width:100px;",
                                         onchange = "this.form.submit()"
                                     }
                                     )

                            <input type="text"
                                   id="senderDisplay"
                                   class="text-input"
                                   style="width:150px;"
                                   readonly
                                   />
                        </div>


 

                        <div class="text-section" style="width:350px">
                            <label class="text-label">Kuryer</label>

                            @Html.DropDownList(
                                     "courierName",
                                     ViewBag.Couriers as List<SelectListItem>,
                                     "Hamısı",
                                     new
                                     {
                                         @class = "text-input",
                                         style = "width: 100px;",
                                         id = "courierDropdown",
                                         onchange = "this.form?.submit()" // Avtomatik filterləmək üçün (istəyə bağlı)
                                     }
                                     )

                            <input type="text" id="courierNameDisplay" class="text-input" style="width:150px;" readonly />
                        </div>

    

                    </div>

                    <form method="get" asp-action="Index" id="filterForm">
                        <div style="margin:0 0 0 50px">
                            <div style="width:240px;margin:0 0 5px 0">

                            <input style="width:150px" type="date" name="startDate" id="startDate" class="text-input"
                                  @*  value="@@(Request.Query["startDate"])" *@ />
                                   <p style="display:inline;">-dən</p>
                            </div>
                            

                            <div style="width:240px;">
                           
                                <input style="width:150px" type="date" name="endDate" id="endDate" class="text-input"
                                   @* value="@@(Request.Query["endDate"])" *@ />
                                <p style="display:inline;">-dək</p>

                            </div>
@*                             <button type="submit" class="btn-submit">Filtrlə</button>
 *@                     </div>
                    </form>



                    <div style="height:50px;margin-left:30px;align-items:center" class="radios">
                        <div class="radio-section">
                            <input type="radio" id="allCheck" name="type" value="all"
                                   onchange="dataClear()"
                            @@(Request.Query["type"] == "all" ? "checked" : "") />
                            <label class="radio-label" for="allCheck">Hamısı</label>
                        </div>

                     @*     <div class="radio-section">
                           
                         </div>
                         <div class="radio-section">
                           
                         </div> *@
                        <div class="radio-section">
                            <input type="radio" name="type" value="waybill"
                                   onchange="dataClear()"
                                   @@(Request.Query["type"]= ="waybill" ? "checked" : "" )
                                   id="waybillRadio" />
                            <label class="radio-label" for="waybillRadio">Waybill - 0</label>
                        </div>
                           @*   <div class="radio-section">
                                 <input type="radio" name="type" value="paylanma" onchange="this.form.submit()" (Request.Query["type"]= ="paylanma" ? "checked" : "" ) />
                                 <label class="radio-label" for="paylanma">Paylanma</label>
                             </div> *@
                    </div> 
                    @* <div style="margin-left: 20px;">
                         <button type="submit" class="btn btn-primary">Filtrlə</button>
                    </div>
                    *@
                </div>
            </div>
            </form>


            <div style="width: 250px; display: flex;">
                <button class="today-btn" id="todayFilterBtn" type="button">Bu gün</button>
            </div>
            
            </div>
            <div class="form-table">
                <table class="styled-table">
                    <thead>
                        <tr>
                            <th class="column-sifaris">Sifarişin No</th>
                            <th class="column-gonderen">Göndərən</th>
                    <th class="column-gonderen-unvan">Göndərənin Ünvanı</th>

                            <th class="column-waybill">Waybill</th>
                            @* <th class="column-paylanma">Paylanma</th> *@
                            <th class="column-tarix">Tarix</th>
                    <th class="column-saat">Saat</th>
                            <th class="column-nov">Növ</th>
                            <th class="column-kuryer">Kuryer</th>
                            <th class="column-alici">Alıcı</th>
                            <th class="column-alici-unvan">Alıcının Ünvanı</th>
                            <th class="column-mebleg">Məbləğ</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>@item.OrderNo</td>


                        <td>
                            <a style="color: black; text-decoration: none; asp-controller="Order" asp-action="Update" asp-route-orderNo="@item.OrderNo">
                                @item.ReceiverName
                            </a>
                        </td>
                        <td>@item.ReceiverAddress</td>

                        
                                <td>@item.InvoiceNo</td>
                         @*     <td>
                                 <input type="checkbox"
                                        class="paylanma-checkbox"
                                        data-id="@item.OrderNo"
                                 @(item.IsPaylanma ? "checked" : "") />
                             </td> *@
                        <td>@item.StartDate.ToString("yyyy-MM-dd")</td>
                        <td>@item.StartDate.ToString("HH:mm")</td>

                                <td>@item.ServiceType!.ServiceType</td>
                                <td>@item.ToCourier!.CourierName</td>
                                <td>@item.SenderName</td>
                                <td>@item.SenderAddress</td>
                                <td>@(item.FinalPrice.ToString("0.00"))</td>
                            </tr>
                        }
                        <!-- Add more rows as needed -->
                    </tbody>
                </table>
            </div>
    <div class="bottom-line">

        <div class="rowShower">
                   <div id="selectedRow">
                       0
                   </div>
                   <div id="rowCountDisplay">

                   </div>
            </div>

            <div class="print-btn" style="right:800px">
                <a href="javascript:void(0);" onclick="window.print()">Print</a>
            </div>
                <div class="back-btn">
                    <a asp-action="Index" asp-controller="Home">⬅</a>
                </div>
        </div>

    <script>

            document.addEventListener("DOMContentLoaded", function () {
                updateSelectedOptionText('senderDropdown');
                updateSelectedOptionText('courierDropdown');
                const todayFilterBtn = document.getElementById("todayFilterBtn");
                const courierDropdown = document.getElementById("courierDropdown");
                const senderDropdown = document.getElementById("senderDropdown");
                const nameInput = document.getElementById("courierNameDisplay");
                const senderDisplayInput = document.getElementById("senderDisplay");
                const courierNames = @Html.Raw(Json.Serialize(ViewBag.CourierNames));
                const namesMap = @Html.Raw(Json.Serialize(ViewBag.SenderNames));
                // rowlarin sayini tap
                const tableBody = document.querySelector(".styled-table tbody");
                const rowCount = tableBody ? tableBody.rows.length : 0; //setir SAYI BURDADIR
                //avto tarix arguments
                // document.getElementById("startDate").value = new Date().toISOString().split('T')[0];
                document.getElementById("endDate").value = new Date().toISOString().split('T')[0];

                //sifirlama all
                document.getElementById("allCheck").addEventListener("onchange", function () {
                    dataClear();
            });
         

            // Məsələn, bu sayını HTML-də göstərmək üçün:
            // const countDisplay = document.createElement("div");
            // countDisplay.textContent = `Cədvəldəki sifariş sayı: ${rowCount}`;
            // countDisplay.style.margin = "10px 0";
            // countDisplay.style.fontWeight = "bold";

            document.getElementById("rowCountDisplay").innerHTML = rowCount;
            //secilen row goster
            const rows = document.querySelectorAll(".styled-table tbody tr");
            const selectedRow = document.getElementById("selectedRow");

            rows.forEach((row, index) => {
                row.addEventListener("mouseenter", () => {
                    selectedRow.textContent = index + 1;
                });
            });


            // Bugünün tarixini formatla və filtreyi tətbiq et
            todayFilterBtn.addEventListener("click", function () {
                const today = new Date();
                const formattedDate = today.toISOString().split('T')[0]; // YYYY-MM-DD
                dataClear();
                // URL parametrlərini yenilə
                const params = new URLSearchParams(window.location.search);
                params.set("startDate", formattedDate);
                window.location.href = `/Order?${params.toString()}`;
            });

           

            // Courrier seçimi edildikdə adını yenilə
            function updateDisplayForDropdown(dropdown, map, input) {
                const code = dropdown.value;
                input.value = code ? `${map[code] || ""} ${code}` : "";
            }

            courierDropdown.addEventListener("change", () => updateDisplayForDropdown(courierDropdown, courierNames, nameInput));
            senderDropdown.addEventListener("change", () => updateDisplayForDropdown(senderDropdown, namesMap, senderDisplayInput));

            // Yüklənəndə əvvəlki seçimləri göstər
            updateDisplayForDropdown(courierDropdown, courierNames, nameInput);
            updateDisplayForDropdown(senderDropdown, namesMap, senderDisplayInput);
        });
        // kodla adi ayir
        function extractClientCode(optionText) {
            const match = optionText.match(/^([^\s]+)\s/);
            return match ? match[1] : optionText;
        }

        // Apply logic for both dropdowns
        function updateSelectedOptionText(selectId) {
            const select = document.getElementById(selectId);
            const selectedOption = select.options[select.selectedIndex];

            if (selectedOption && selectedOption.text.includes("(")) {
                const codeOnly = extractClientCode(selectedOption.text);
                selectedOption.text = codeOnly;
            }
        }


        //tarixe gore filter
        const startDateInput = document.getElementById("startDate");
        const endDateInput = document.getElementById("endDate");

        function filterRowsByDate() {
            const startDate = new Date(startDateInput.value);
            const endDate = new Date(endDateInput.value);
            const rows = document.querySelectorAll(".styled-table tbody tr");

            rows.forEach(row => {
                const dateCell = row.cells[4]; // tarix sütunu (5-ci sütun, index 4)
                const rowDate = new Date(dateCell.textContent);

                // Əgər tarix daxil edilməyibsə, hər şeyi göstər
                if (!startDateInput.value && !endDateInput.value) {
                    row.style.display = "";
                } else if (
                    (!isNaN(startDate) ? rowDate >= startDate : true) &&
                    (!isNaN(endDate) ? rowDate <= endDate : true)
                ) {
                    row.style.display = "";
                } else {
                    row.style.display = "none";
                }
            });
        }

        // Hər iki tarixdə dəyişiklik olduqda filtr et
        startDateInput.addEventListener("change", filterRowsByDate);
        endDateInput.addEventListener("change", filterRowsByDate);

        //checkedAllFilter
        function dataClear() {
            document.getElementById("startDate").value = "";
            document.getElementById("endDate").value = "";
            document.getElementById("courierDropdown").value = "";
            document.getElementById("senderDropdown").value = "";
            document.getElementById("courierNameDisplay").value = "";
            document.getElementById("senderDisplay").value = "";

            document.getElementById("filterForm").submit();

             console.log("salam Alekum");
        }

</script>
</body>
</html>